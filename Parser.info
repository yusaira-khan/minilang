-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> DeclarationList StatementList eof       (1)
	Type -> float                                      (2)
	Type -> string                                     (3)
	Type -> int                                        (4)
	Declaration -> var Id ":" Type ";"                 (5)
	DeclarationList -> Declaration                     (6)
	DeclarationList -> DeclarationList Declaration     (7)
	StatementList -> Statement                         (8)
	StatementList -> StatementList Statement           (9)
	Statement -> if Exp then StatementList endif       (10)
	Statement -> if Exp then StatementList else StatementList endif   (11)
	Statement -> while Exp do StatementList done       (12)
	Statement -> print Exp ";"                         (13)
	Statement -> read Id ";"                           (14)
	Statement -> Id "=" Exp ";"                        (15)
	Exp -> Exp "+" Term                                (16)
	Exp -> Exp "-" Term                                (17)
	Exp -> Term                                        (18)
	Term -> Term "*" Factor                            (19)
	Term -> Term "/" Factor                            (20)
	Term -> Factor                                     (21)
	Factor -> "(" Exp ")"                              (22)
	Factor -> "-" Factor                               (23)
	Factor -> Float_Literal                            (24)
	Factor -> String_Literal                           (25)
	Factor -> Integer_Literal                          (26)
	Factor -> Id                                       (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TIntType _ }
	float          { TFloatType _ }
	string         { TStringType _ }
	Integer_Literal{ TIntLit _ $$ }
	Float_Literal  { TFloatLit _ $$ }
	String_Literal { TStringLit _ $$ }
	var            { TVar _ }
	if             { TIf _ }
	then           { TThen _ }
	else           { TElse _ }
	endif          { TEndif _ }
	while          { TWhile _ }
	do             { TDo _ }
	done           { TDone _ }
	"="            { TEquals _ }
	";"            { TSemiColon _ }
	":"            { TColon _ }
	"+"            { TPlus _ }
	"-"            { TMinus _ }
	"*"            { TStar _ }
	"/"            { TSlash _ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }
	print          { TPrint _ }
	read           { TRead _ }
	Id             { TId _ $$ }
	eof            { TEOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Type            rules 2, 3, 4
	Declaration     rule  5
	DeclarationList rules 6, 7
	StatementList   rules 8, 9
	Statement       rules 10, 11, 12, 13, 14, 15
	Exp             rules 16, 17, 18
	Term            rules 19, 20, 21
	Factor          rules 22, 23, 24, 25, 26, 27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4

	Program        goto state 5
	Declaration    goto state 2
	DeclarationListgoto state 3

State 1


	var            shift, and enter state 4

	Declaration    goto state 2
	DeclarationListgoto state 3

State 2

	DeclarationList -> Declaration .                    (rule 6)

	var            reduce using rule 6
	if             reduce using rule 6
	while          reduce using rule 6
	print          reduce using rule 6
	read           reduce using rule 6
	Id             reduce using rule 6


State 3

	Program -> DeclarationList . StatementList eof      (rule 1)
	DeclarationList -> DeclarationList . Declaration    (rule 7)

	var            shift, and enter state 4
	if             shift, and enter state 10
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	Declaration    goto state 7
	StatementList  goto state 8
	Statement      goto state 9

State 4

	Declaration -> var . Id ":" Type ";"                (rule 5)

	Id             shift, and enter state 6


State 5

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 6

	Declaration -> var Id . ":" Type ";"                (rule 5)

	":"            shift, and enter state 30


State 7

	DeclarationList -> DeclarationList Declaration .    (rule 7)

	var            reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	print          reduce using rule 7
	read           reduce using rule 7
	Id             reduce using rule 7


State 8

	Program -> DeclarationList StatementList . eof      (rule 1)
	StatementList -> StatementList . Statement          (rule 9)

	if             shift, and enter state 10
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14
	eof            shift, and enter state 29

	Statement      goto state 28

State 9

	StatementList -> Statement .                        (rule 8)

	if             reduce using rule 8
	else           reduce using rule 8
	endif          reduce using rule 8
	while          reduce using rule 8
	done           reduce using rule 8
	print          reduce using rule 8
	read           reduce using rule 8
	Id             reduce using rule 8
	eof            reduce using rule 8


State 10

	Statement -> if . Exp then StatementList endif      (rule 10)
	Statement -> if . Exp then StatementList else StatementList endif    (rule 11)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Exp            goto state 27
	Term           goto state 18
	Factor         goto state 19

State 11

	Statement -> while . Exp do StatementList done      (rule 12)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Exp            goto state 26
	Term           goto state 18
	Factor         goto state 19

State 12

	Statement -> print . Exp ";"                        (rule 13)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Exp            goto state 17
	Term           goto state 18
	Factor         goto state 19

State 13

	Statement -> read . Id ";"                          (rule 14)

	Id             shift, and enter state 16


State 14

	Statement -> Id . "=" Exp ";"                       (rule 15)

	"="            shift, and enter state 15


State 15

	Statement -> Id "=" . Exp ";"                       (rule 15)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Exp            goto state 45
	Term           goto state 18
	Factor         goto state 19

State 16

	Statement -> read Id . ";"                          (rule 14)

	";"            shift, and enter state 44


State 17

	Statement -> print Exp . ";"                        (rule 13)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	";"            shift, and enter state 43
	"+"            shift, and enter state 36
	"-"            shift, and enter state 37


State 18

	Exp -> Term .                                       (rule 18)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 18
	do             reduce using rule 18
	";"            reduce using rule 18
	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	")"            reduce using rule 18


State 19

	Term -> Factor .                                    (rule 21)

	then           reduce using rule 21
	do             reduce using rule 21
	";"            reduce using rule 21
	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	")"            reduce using rule 21


State 20

	Factor -> Integer_Literal .                         (rule 26)

	then           reduce using rule 26
	do             reduce using rule 26
	";"            reduce using rule 26
	"+"            reduce using rule 26
	"-"            reduce using rule 26
	"*"            reduce using rule 26
	"/"            reduce using rule 26
	")"            reduce using rule 26


State 21

	Factor -> Float_Literal .                           (rule 24)

	then           reduce using rule 24
	do             reduce using rule 24
	";"            reduce using rule 24
	"+"            reduce using rule 24
	"-"            reduce using rule 24
	"*"            reduce using rule 24
	"/"            reduce using rule 24
	")"            reduce using rule 24


State 22

	Factor -> String_Literal .                          (rule 25)

	then           reduce using rule 25
	do             reduce using rule 25
	";"            reduce using rule 25
	"+"            reduce using rule 25
	"-"            reduce using rule 25
	"*"            reduce using rule 25
	"/"            reduce using rule 25
	")"            reduce using rule 25


State 23

	Factor -> "-" . Factor                              (rule 23)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Factor         goto state 40

State 24

	Factor -> "(" . Exp ")"                             (rule 22)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Exp            goto state 39
	Term           goto state 18
	Factor         goto state 19

State 25

	Factor -> Id .                                      (rule 27)

	then           reduce using rule 27
	do             reduce using rule 27
	";"            reduce using rule 27
	"+"            reduce using rule 27
	"-"            reduce using rule 27
	"*"            reduce using rule 27
	"/"            reduce using rule 27
	")"            reduce using rule 27


State 26

	Statement -> while Exp . do StatementList done      (rule 12)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	do             shift, and enter state 38
	"+"            shift, and enter state 36
	"-"            shift, and enter state 37


State 27

	Statement -> if Exp . then StatementList endif      (rule 10)
	Statement -> if Exp . then StatementList else StatementList endif    (rule 11)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	then           shift, and enter state 35
	"+"            shift, and enter state 36
	"-"            shift, and enter state 37


State 28

	StatementList -> StatementList Statement .          (rule 9)

	if             reduce using rule 9
	else           reduce using rule 9
	endif          reduce using rule 9
	while          reduce using rule 9
	done           reduce using rule 9
	print          reduce using rule 9
	read           reduce using rule 9
	Id             reduce using rule 9
	eof            reduce using rule 9


State 29

	Program -> DeclarationList StatementList eof .      (rule 1)

	%eof           reduce using rule 1


State 30

	Declaration -> var Id ":" . Type ";"                (rule 5)

	int            shift, and enter state 32
	float          shift, and enter state 33
	string         shift, and enter state 34

	Type           goto state 31

State 31

	Declaration -> var Id ":" Type . ";"                (rule 5)

	";"            shift, and enter state 54


State 32

	Type -> int .                                       (rule 4)

	";"            reduce using rule 4


State 33

	Type -> float .                                     (rule 2)

	";"            reduce using rule 2


State 34

	Type -> string .                                    (rule 3)

	";"            reduce using rule 3


State 35

	Statement -> if Exp then . StatementList endif      (rule 10)
	Statement -> if Exp then . StatementList else StatementList endif    (rule 11)

	if             shift, and enter state 10
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	StatementList  goto state 53
	Statement      goto state 9

State 36

	Exp -> Exp "+" . Term                               (rule 16)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Term           goto state 52
	Factor         goto state 19

State 37

	Exp -> Exp "-" . Term                               (rule 17)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Term           goto state 51
	Factor         goto state 19

State 38

	Statement -> while Exp do . StatementList done      (rule 12)

	if             shift, and enter state 10
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	StatementList  goto state 50
	Statement      goto state 9

State 39

	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)
	Factor -> "(" Exp . ")"                             (rule 22)

	"+"            shift, and enter state 36
	"-"            shift, and enter state 37
	")"            shift, and enter state 49


State 40

	Factor -> "-" Factor .                              (rule 23)

	then           reduce using rule 23
	do             reduce using rule 23
	";"            reduce using rule 23
	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	")"            reduce using rule 23


State 41

	Term -> Term "*" . Factor                           (rule 19)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Factor         goto state 48

State 42

	Term -> Term "/" . Factor                           (rule 20)

	Integer_Literalshift, and enter state 20
	Float_Literal  shift, and enter state 21
	String_Literal shift, and enter state 22
	"-"            shift, and enter state 23
	"("            shift, and enter state 24
	Id             shift, and enter state 25

	Factor         goto state 47

State 43

	Statement -> print Exp ";" .                        (rule 13)

	if             reduce using rule 13
	else           reduce using rule 13
	endif          reduce using rule 13
	while          reduce using rule 13
	done           reduce using rule 13
	print          reduce using rule 13
	read           reduce using rule 13
	Id             reduce using rule 13
	eof            reduce using rule 13


State 44

	Statement -> read Id ";" .                          (rule 14)

	if             reduce using rule 14
	else           reduce using rule 14
	endif          reduce using rule 14
	while          reduce using rule 14
	done           reduce using rule 14
	print          reduce using rule 14
	read           reduce using rule 14
	Id             reduce using rule 14
	eof            reduce using rule 14


State 45

	Statement -> Id "=" Exp . ";"                       (rule 15)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	";"            shift, and enter state 46
	"+"            shift, and enter state 36
	"-"            shift, and enter state 37


State 46

	Statement -> Id "=" Exp ";" .                       (rule 15)

	if             reduce using rule 15
	else           reduce using rule 15
	endif          reduce using rule 15
	while          reduce using rule 15
	done           reduce using rule 15
	print          reduce using rule 15
	read           reduce using rule 15
	Id             reduce using rule 15
	eof            reduce using rule 15


State 47

	Term -> Term "/" Factor .                           (rule 20)

	then           reduce using rule 20
	do             reduce using rule 20
	";"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	")"            reduce using rule 20


State 48

	Term -> Term "*" Factor .                           (rule 19)

	then           reduce using rule 19
	do             reduce using rule 19
	";"            reduce using rule 19
	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	")"            reduce using rule 19


State 49

	Factor -> "(" Exp ")" .                             (rule 22)

	then           reduce using rule 22
	do             reduce using rule 22
	";"            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	")"            reduce using rule 22


State 50

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> while Exp do StatementList . done      (rule 12)

	if             shift, and enter state 10
	while          shift, and enter state 11
	done           shift, and enter state 57
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	Statement      goto state 28

State 51

	Exp -> Exp "-" Term .                               (rule 17)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 17
	do             reduce using rule 17
	";"            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	")"            reduce using rule 17


State 52

	Exp -> Exp "+" Term .                               (rule 16)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 16
	do             reduce using rule 16
	";"            reduce using rule 16
	"+"            reduce using rule 16
	"-"            reduce using rule 16
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	")"            reduce using rule 16


State 53

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> if Exp then StatementList . endif      (rule 10)
	Statement -> if Exp then StatementList . else StatementList endif    (rule 11)

	if             shift, and enter state 10
	else           shift, and enter state 55
	endif          shift, and enter state 56
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	Statement      goto state 28

State 54

	Declaration -> var Id ":" Type ";" .                (rule 5)

	var            reduce using rule 5
	if             reduce using rule 5
	while          reduce using rule 5
	print          reduce using rule 5
	read           reduce using rule 5
	Id             reduce using rule 5


State 55

	Statement -> if Exp then StatementList else . StatementList endif    (rule 11)

	if             shift, and enter state 10
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	StatementList  goto state 58
	Statement      goto state 9

State 56

	Statement -> if Exp then StatementList endif .      (rule 10)

	if             reduce using rule 10
	else           reduce using rule 10
	endif          reduce using rule 10
	while          reduce using rule 10
	done           reduce using rule 10
	print          reduce using rule 10
	read           reduce using rule 10
	Id             reduce using rule 10
	eof            reduce using rule 10


State 57

	Statement -> while Exp do StatementList done .      (rule 12)

	if             reduce using rule 12
	else           reduce using rule 12
	endif          reduce using rule 12
	while          reduce using rule 12
	done           reduce using rule 12
	print          reduce using rule 12
	read           reduce using rule 12
	Id             reduce using rule 12
	eof            reduce using rule 12


State 58

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> if Exp then StatementList else StatementList . endif    (rule 11)

	if             shift, and enter state 10
	endif          shift, and enter state 59
	while          shift, and enter state 11
	print          shift, and enter state 12
	read           shift, and enter state 13
	Id             shift, and enter state 14

	Statement      goto state 28

State 59

	Statement -> if Exp then StatementList else StatementList endif .    (rule 11)

	if             reduce using rule 11
	else           reduce using rule 11
	endif          reduce using rule 11
	while          reduce using rule 11
	done           reduce using rule 11
	print          reduce using rule 11
	read           reduce using rule 11
	Id             reduce using rule 11
	eof            reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 27
Number of non-terminals: 10
Number of states: 60
