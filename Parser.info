-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------

state 36 contains 1 shift/reduce conflicts.

terminal "-" is unused
terminal "*" is unused
terminal "/" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> StatementList eof                       (1)
	Type -> float                                      (2)
	Type -> string                                     (3)
	Type -> int                                        (4)
	Literal -> float_lit                               (5)
	Literal -> string_lit                              (6)
	Literal -> int_lit                                 (7)
	Statement -> if Exp then StatementList else StatementList endif   (8)
	Statement -> while Exp do StatementList done       (9)
	Statement -> print Id ";"                          (10)
	Statement -> read Id ";"                           (11)
	Statement -> var Id ":" Type ";"                   (12)
	Statement -> Id "=" Exp ";"                        (13)
	StatementList -> Statement                         (14)
	StatementList -> StatementList Statement           (15)
	Exp -> Exp "+" Exp                                 (16)
	Exp -> "(" Exp ")"                                 (17)
	Exp -> Literal                                     (18)
	Exp -> Id                                          (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TIntType }
	float          { TFloatType }
	string         { TStringType }
	int_lit        { TIntLit $$ }
	float_lit      { TFloatLit $$ }
	string_lit     { TStringLit $$ }
	var            { TVar }
	if             { TIf }
	then           { TThen }
	else           { TElse }
	endif          { TEndif }
	while          { TWhile }
	do             { TDo }
	done           { TDone }
	"="            { TEquals }
	";"            { TSemiColon }
	":"            { TColon }
	"+"            { TPlus }
	"-"            { TMinus }
	"*"            { TStar }
	"/"            { TSlash }
	"("            { TLeftParen }
	")"            { TRightParen }
	print          { TPrint }
	read           { TRead }
	Id             { TId $$ }
	eof            { TEOF }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Type            rules 2, 3, 4
	Literal         rules 5, 6, 7
	Statement       rules 8, 9, 10, 11, 12, 13
	StatementList   rules 14, 15
	Exp             rules 16, 17, 18, 19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Program        goto state 10
	Statement      goto state 2
	StatementList  goto state 3

State 1


	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 2
	StatementList  goto state 3

State 2

	StatementList -> Statement .                        (rule 14)

	var            reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	endif          reduce using rule 14
	while          reduce using rule 14
	done           reduce using rule 14
	print          reduce using rule 14
	read           reduce using rule 14
	Id             reduce using rule 14
	eof            reduce using rule 14


State 3

	Program -> StatementList . eof                      (rule 1)
	StatementList -> StatementList . Statement          (rule 15)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9
	eof            shift, and enter state 24

	Statement      goto state 23

State 4

	Statement -> var . Id ":" Type ";"                  (rule 12)

	Id             shift, and enter state 22


State 5

	Statement -> if . Exp then StatementList else StatementList endif    (rule 8)

	int_lit        shift, and enter state 16
	float_lit      shift, and enter state 17
	string_lit     shift, and enter state 18
	"("            shift, and enter state 19
	Id             shift, and enter state 20

	Literal        goto state 14
	Exp            goto state 21

State 6

	Statement -> while . Exp do StatementList done      (rule 9)

	int_lit        shift, and enter state 16
	float_lit      shift, and enter state 17
	string_lit     shift, and enter state 18
	"("            shift, and enter state 19
	Id             shift, and enter state 20

	Literal        goto state 14
	Exp            goto state 15

State 7

	Statement -> print . Id ";"                         (rule 10)

	Id             shift, and enter state 13


State 8

	Statement -> read . Id ";"                          (rule 11)

	Id             shift, and enter state 12


State 9

	Statement -> Id . "=" Exp ";"                       (rule 13)

	"="            shift, and enter state 11


State 10

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 11

	Statement -> Id "=" . Exp ";"                       (rule 13)

	int_lit        shift, and enter state 16
	float_lit      shift, and enter state 17
	string_lit     shift, and enter state 18
	"("            shift, and enter state 19
	Id             shift, and enter state 20

	Literal        goto state 14
	Exp            goto state 32

State 12

	Statement -> read Id . ";"                          (rule 11)

	";"            shift, and enter state 31


State 13

	Statement -> print Id . ";"                         (rule 10)

	";"            shift, and enter state 30


State 14

	Exp -> Literal .                                    (rule 18)

	then           reduce using rule 18
	do             reduce using rule 18
	";"            reduce using rule 18
	"+"            reduce using rule 18
	")"            reduce using rule 18


State 15

	Statement -> while Exp . do StatementList done      (rule 9)
	Exp -> Exp . "+" Exp                                (rule 16)

	do             shift, and enter state 29
	"+"            shift, and enter state 27


State 16

	Literal -> int_lit .                                (rule 7)

	then           reduce using rule 7
	do             reduce using rule 7
	";"            reduce using rule 7
	"+"            reduce using rule 7
	")"            reduce using rule 7


State 17

	Literal -> float_lit .                              (rule 5)

	then           reduce using rule 5
	do             reduce using rule 5
	";"            reduce using rule 5
	"+"            reduce using rule 5
	")"            reduce using rule 5


State 18

	Literal -> string_lit .                             (rule 6)

	then           reduce using rule 6
	do             reduce using rule 6
	";"            reduce using rule 6
	"+"            reduce using rule 6
	")"            reduce using rule 6


State 19

	Exp -> "(" . Exp ")"                                (rule 17)

	int_lit        shift, and enter state 16
	float_lit      shift, and enter state 17
	string_lit     shift, and enter state 18
	"("            shift, and enter state 19
	Id             shift, and enter state 20

	Literal        goto state 14
	Exp            goto state 28

State 20

	Exp -> Id .                                         (rule 19)

	then           reduce using rule 19
	do             reduce using rule 19
	";"            reduce using rule 19
	"+"            reduce using rule 19
	")"            reduce using rule 19


State 21

	Statement -> if Exp . then StatementList else StatementList endif    (rule 8)
	Exp -> Exp . "+" Exp                                (rule 16)

	then           shift, and enter state 26
	"+"            shift, and enter state 27


State 22

	Statement -> var Id . ":" Type ";"                  (rule 12)

	":"            shift, and enter state 25


State 23

	StatementList -> StatementList Statement .          (rule 15)

	var            reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	endif          reduce using rule 15
	while          reduce using rule 15
	done           reduce using rule 15
	print          reduce using rule 15
	read           reduce using rule 15
	Id             reduce using rule 15
	eof            reduce using rule 15


State 24

	Program -> StatementList eof .                      (rule 1)

	%eof           reduce using rule 1


State 25

	Statement -> var Id ":" . Type ";"                  (rule 12)

	int            shift, and enter state 39
	float          shift, and enter state 40
	string         shift, and enter state 41

	Type           goto state 38

State 26

	Statement -> if Exp then . StatementList else StatementList endif    (rule 8)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 2
	StatementList  goto state 37

State 27

	Exp -> Exp "+" . Exp                                (rule 16)

	int_lit        shift, and enter state 16
	float_lit      shift, and enter state 17
	string_lit     shift, and enter state 18
	"("            shift, and enter state 19
	Id             shift, and enter state 20

	Literal        goto state 14
	Exp            goto state 36

State 28

	Exp -> Exp . "+" Exp                                (rule 16)
	Exp -> "(" Exp . ")"                                (rule 17)

	"+"            shift, and enter state 27
	")"            shift, and enter state 35


State 29

	Statement -> while Exp do . StatementList done      (rule 9)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 2
	StatementList  goto state 34

State 30

	Statement -> print Id ";" .                         (rule 10)

	var            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	endif          reduce using rule 10
	while          reduce using rule 10
	done           reduce using rule 10
	print          reduce using rule 10
	read           reduce using rule 10
	Id             reduce using rule 10
	eof            reduce using rule 10


State 31

	Statement -> read Id ";" .                          (rule 11)

	var            reduce using rule 11
	if             reduce using rule 11
	else           reduce using rule 11
	endif          reduce using rule 11
	while          reduce using rule 11
	done           reduce using rule 11
	print          reduce using rule 11
	read           reduce using rule 11
	Id             reduce using rule 11
	eof            reduce using rule 11


State 32

	Statement -> Id "=" Exp . ";"                       (rule 13)
	Exp -> Exp . "+" Exp                                (rule 16)

	";"            shift, and enter state 33
	"+"            shift, and enter state 27


State 33

	Statement -> Id "=" Exp ";" .                       (rule 13)

	var            reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	endif          reduce using rule 13
	while          reduce using rule 13
	done           reduce using rule 13
	print          reduce using rule 13
	read           reduce using rule 13
	Id             reduce using rule 13
	eof            reduce using rule 13


State 34

	Statement -> while Exp do StatementList . done      (rule 9)
	StatementList -> StatementList . Statement          (rule 15)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	done           shift, and enter state 44
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 23

State 35

	Exp -> "(" Exp ")" .                                (rule 17)

	then           reduce using rule 17
	do             reduce using rule 17
	";"            reduce using rule 17
	"+"            reduce using rule 17
	")"            reduce using rule 17


State 36

	Exp -> Exp . "+" Exp                                (rule 16)
	Exp -> Exp "+" Exp .                                (rule 16)

	then           reduce using rule 16
	do             reduce using rule 16
	";"            reduce using rule 16
	"+"            shift, and enter state 27
			(reduce using rule 16)

	")"            reduce using rule 16


State 37

	Statement -> if Exp then StatementList . else StatementList endif    (rule 8)
	StatementList -> StatementList . Statement          (rule 15)

	var            shift, and enter state 4
	if             shift, and enter state 5
	else           shift, and enter state 43
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 23

State 38

	Statement -> var Id ":" Type . ";"                  (rule 12)

	";"            shift, and enter state 42


State 39

	Type -> int .                                       (rule 4)

	";"            reduce using rule 4


State 40

	Type -> float .                                     (rule 2)

	";"            reduce using rule 2


State 41

	Type -> string .                                    (rule 3)

	";"            reduce using rule 3


State 42

	Statement -> var Id ":" Type ";" .                  (rule 12)

	var            reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	endif          reduce using rule 12
	while          reduce using rule 12
	done           reduce using rule 12
	print          reduce using rule 12
	read           reduce using rule 12
	Id             reduce using rule 12
	eof            reduce using rule 12


State 43

	Statement -> if Exp then StatementList else . StatementList endif    (rule 8)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 2
	StatementList  goto state 45

State 44

	Statement -> while Exp do StatementList done .      (rule 9)

	var            reduce using rule 9
	if             reduce using rule 9
	else           reduce using rule 9
	endif          reduce using rule 9
	while          reduce using rule 9
	done           reduce using rule 9
	print          reduce using rule 9
	read           reduce using rule 9
	Id             reduce using rule 9
	eof            reduce using rule 9


State 45

	Statement -> if Exp then StatementList else StatementList . endif    (rule 8)
	StatementList -> StatementList . Statement          (rule 15)

	var            shift, and enter state 4
	if             shift, and enter state 5
	endif          shift, and enter state 46
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 23

State 46

	Statement -> if Exp then StatementList else StatementList endif .    (rule 8)

	var            reduce using rule 8
	if             reduce using rule 8
	else           reduce using rule 8
	endif          reduce using rule 8
	while          reduce using rule 8
	done           reduce using rule 8
	print          reduce using rule 8
	read           reduce using rule 8
	Id             reduce using rule 8
	eof            reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 27
Number of non-terminals: 7
Number of states: 47
