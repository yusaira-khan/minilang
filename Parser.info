-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> StatementList eof                       (1)
	Type -> float                                      (2)
	Type -> string                                     (3)
	Type -> int                                        (4)
	Literal -> float_lit                               (5)
	Literal -> string_lit                              (6)
	Literal -> int_lit                                 (7)
	StatementList -> Statement                         (8)
	StatementList -> StatementList Statement           (9)
	Statement -> if Exp then StatementList else StatementList endif   (10)
	Statement -> while Exp do StatementList done       (11)
	Statement -> print Id ";"                          (12)
	Statement -> read Id ";"                           (13)
	Statement -> var Id ":" Type ";"                   (14)
	Statement -> Id "=" Exp ";"                        (15)
	Exp -> Exp "+" Term                                (16)
	Exp -> Exp "-" Term                                (17)
	Exp -> Term                                        (18)
	Term -> Term "*" Factor                            (19)
	Term -> Term "/" Factor                            (20)
	Term -> Factor                                     (21)
	Factor -> "(" Exp ")"                              (22)
	Factor -> "-" Factor                               (23)
	Factor -> Literal                                  (24)
	Factor -> Id                                       (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TIntType }
	float          { TFloatType }
	string         { TStringType }
	int_lit        { TIntLit $$ }
	float_lit      { TFloatLit $$ }
	string_lit     { TStringLit $$ }
	var            { TVar }
	if             { TIf }
	then           { TThen }
	else           { TElse }
	endif          { TEndif }
	while          { TWhile }
	do             { TDo }
	done           { TDone }
	"="            { TEquals }
	";"            { TSemiColon }
	":"            { TColon }
	"+"            { TPlus }
	"-"            { TMinus }
	"*"            { TStar }
	"/"            { TSlash }
	"("            { TLeftParen }
	")"            { TRightParen }
	print          { TPrint }
	read           { TRead }
	Id             { TId $$ }
	eof            { TEOF }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Type            rules 2, 3, 4
	Literal         rules 5, 6, 7
	StatementList   rules 8, 9
	Statement       rules 10, 11, 12, 13, 14, 15
	Exp             rules 16, 17, 18
	Term            rules 19, 20, 21
	Factor          rules 22, 23, 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Program        goto state 10
	StatementList  goto state 2
	Statement      goto state 3

State 1


	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	StatementList  goto state 2
	Statement      goto state 3

State 2

	Program -> StatementList . eof                      (rule 1)
	StatementList -> StatementList . Statement          (rule 9)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9
	eof            shift, and enter state 27

	Statement      goto state 26

State 3

	StatementList -> Statement .                        (rule 8)

	var            reduce using rule 8
	if             reduce using rule 8
	else           reduce using rule 8
	endif          reduce using rule 8
	while          reduce using rule 8
	done           reduce using rule 8
	print          reduce using rule 8
	read           reduce using rule 8
	Id             reduce using rule 8
	eof            reduce using rule 8


State 4

	Statement -> var . Id ":" Type ";"                  (rule 14)

	Id             shift, and enter state 25


State 5

	Statement -> if . Exp then StatementList else StatementList endif    (rule 10)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Exp            goto state 24
	Term           goto state 16
	Factor         goto state 17

State 6

	Statement -> while . Exp do StatementList done      (rule 11)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Exp            goto state 15
	Term           goto state 16
	Factor         goto state 17

State 7

	Statement -> print . Id ";"                         (rule 12)

	Id             shift, and enter state 13


State 8

	Statement -> read . Id ";"                          (rule 13)

	Id             shift, and enter state 12


State 9

	Statement -> Id . "=" Exp ";"                       (rule 15)

	"="            shift, and enter state 11


State 10

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 11

	Statement -> Id "=" . Exp ";"                       (rule 15)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Exp            goto state 39
	Term           goto state 16
	Factor         goto state 17

State 12

	Statement -> read Id . ";"                          (rule 13)

	";"            shift, and enter state 38


State 13

	Statement -> print Id . ";"                         (rule 12)

	";"            shift, and enter state 37


State 14

	Factor -> Literal .                                 (rule 24)

	then           reduce using rule 24
	do             reduce using rule 24
	";"            reduce using rule 24
	"+"            reduce using rule 24
	"-"            reduce using rule 24
	"*"            reduce using rule 24
	"/"            reduce using rule 24
	")"            reduce using rule 24


State 15

	Statement -> while Exp . do StatementList done      (rule 11)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	do             shift, and enter state 36
	"+"            shift, and enter state 30
	"-"            shift, and enter state 31


State 16

	Exp -> Term .                                       (rule 18)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 18
	do             reduce using rule 18
	";"            reduce using rule 18
	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            shift, and enter state 34
	"/"            shift, and enter state 35
	")"            reduce using rule 18


State 17

	Term -> Factor .                                    (rule 21)

	then           reduce using rule 21
	do             reduce using rule 21
	";"            reduce using rule 21
	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	")"            reduce using rule 21


State 18

	Literal -> int_lit .                                (rule 7)

	then           reduce using rule 7
	do             reduce using rule 7
	";"            reduce using rule 7
	"+"            reduce using rule 7
	"-"            reduce using rule 7
	"*"            reduce using rule 7
	"/"            reduce using rule 7
	")"            reduce using rule 7


State 19

	Literal -> float_lit .                              (rule 5)

	then           reduce using rule 5
	do             reduce using rule 5
	";"            reduce using rule 5
	"+"            reduce using rule 5
	"-"            reduce using rule 5
	"*"            reduce using rule 5
	"/"            reduce using rule 5
	")"            reduce using rule 5


State 20

	Literal -> string_lit .                             (rule 6)

	then           reduce using rule 6
	do             reduce using rule 6
	";"            reduce using rule 6
	"+"            reduce using rule 6
	"-"            reduce using rule 6
	"*"            reduce using rule 6
	"/"            reduce using rule 6
	")"            reduce using rule 6


State 21

	Factor -> "-" . Factor                              (rule 23)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Factor         goto state 33

State 22

	Factor -> "(" . Exp ")"                             (rule 22)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Exp            goto state 32
	Term           goto state 16
	Factor         goto state 17

State 23

	Factor -> Id .                                      (rule 25)

	then           reduce using rule 25
	do             reduce using rule 25
	";"            reduce using rule 25
	"+"            reduce using rule 25
	"-"            reduce using rule 25
	"*"            reduce using rule 25
	"/"            reduce using rule 25
	")"            reduce using rule 25


State 24

	Statement -> if Exp . then StatementList else StatementList endif    (rule 10)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	then           shift, and enter state 29
	"+"            shift, and enter state 30
	"-"            shift, and enter state 31


State 25

	Statement -> var Id . ":" Type ";"                  (rule 14)

	":"            shift, and enter state 28


State 26

	StatementList -> StatementList Statement .          (rule 9)

	var            reduce using rule 9
	if             reduce using rule 9
	else           reduce using rule 9
	endif          reduce using rule 9
	while          reduce using rule 9
	done           reduce using rule 9
	print          reduce using rule 9
	read           reduce using rule 9
	Id             reduce using rule 9
	eof            reduce using rule 9


State 27

	Program -> StatementList eof .                      (rule 1)

	%eof           reduce using rule 1


State 28

	Statement -> var Id ":" . Type ";"                  (rule 14)

	int            shift, and enter state 49
	float          shift, and enter state 50
	string         shift, and enter state 51

	Type           goto state 48

State 29

	Statement -> if Exp then . StatementList else StatementList endif    (rule 10)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	StatementList  goto state 47
	Statement      goto state 3

State 30

	Exp -> Exp "+" . Term                               (rule 16)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Term           goto state 46
	Factor         goto state 17

State 31

	Exp -> Exp "-" . Term                               (rule 17)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Term           goto state 45
	Factor         goto state 17

State 32

	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)
	Factor -> "(" Exp . ")"                             (rule 22)

	"+"            shift, and enter state 30
	"-"            shift, and enter state 31
	")"            shift, and enter state 44


State 33

	Factor -> "-" Factor .                              (rule 23)

	then           reduce using rule 23
	do             reduce using rule 23
	";"            reduce using rule 23
	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	")"            reduce using rule 23


State 34

	Term -> Term "*" . Factor                           (rule 19)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Factor         goto state 43

State 35

	Term -> Term "/" . Factor                           (rule 20)

	int_lit        shift, and enter state 18
	float_lit      shift, and enter state 19
	string_lit     shift, and enter state 20
	"-"            shift, and enter state 21
	"("            shift, and enter state 22
	Id             shift, and enter state 23

	Literal        goto state 14
	Factor         goto state 42

State 36

	Statement -> while Exp do . StatementList done      (rule 11)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	StatementList  goto state 41
	Statement      goto state 3

State 37

	Statement -> print Id ";" .                         (rule 12)

	var            reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	endif          reduce using rule 12
	while          reduce using rule 12
	done           reduce using rule 12
	print          reduce using rule 12
	read           reduce using rule 12
	Id             reduce using rule 12
	eof            reduce using rule 12


State 38

	Statement -> read Id ";" .                          (rule 13)

	var            reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	endif          reduce using rule 13
	while          reduce using rule 13
	done           reduce using rule 13
	print          reduce using rule 13
	read           reduce using rule 13
	Id             reduce using rule 13
	eof            reduce using rule 13


State 39

	Statement -> Id "=" Exp . ";"                       (rule 15)
	Exp -> Exp . "+" Term                               (rule 16)
	Exp -> Exp . "-" Term                               (rule 17)

	";"            shift, and enter state 40
	"+"            shift, and enter state 30
	"-"            shift, and enter state 31


State 40

	Statement -> Id "=" Exp ";" .                       (rule 15)

	var            reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	endif          reduce using rule 15
	while          reduce using rule 15
	done           reduce using rule 15
	print          reduce using rule 15
	read           reduce using rule 15
	Id             reduce using rule 15
	eof            reduce using rule 15


State 41

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> while Exp do StatementList . done      (rule 11)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	done           shift, and enter state 54
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 26

State 42

	Term -> Term "/" Factor .                           (rule 20)

	then           reduce using rule 20
	do             reduce using rule 20
	";"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	")"            reduce using rule 20


State 43

	Term -> Term "*" Factor .                           (rule 19)

	then           reduce using rule 19
	do             reduce using rule 19
	";"            reduce using rule 19
	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	")"            reduce using rule 19


State 44

	Factor -> "(" Exp ")" .                             (rule 22)

	then           reduce using rule 22
	do             reduce using rule 22
	";"            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	")"            reduce using rule 22


State 45

	Exp -> Exp "-" Term .                               (rule 17)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 17
	do             reduce using rule 17
	";"            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"*"            shift, and enter state 34
	"/"            shift, and enter state 35
	")"            reduce using rule 17


State 46

	Exp -> Exp "+" Term .                               (rule 16)
	Term -> Term . "*" Factor                           (rule 19)
	Term -> Term . "/" Factor                           (rule 20)

	then           reduce using rule 16
	do             reduce using rule 16
	";"            reduce using rule 16
	"+"            reduce using rule 16
	"-"            reduce using rule 16
	"*"            shift, and enter state 34
	"/"            shift, and enter state 35
	")"            reduce using rule 16


State 47

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> if Exp then StatementList . else StatementList endif    (rule 10)

	var            shift, and enter state 4
	if             shift, and enter state 5
	else           shift, and enter state 53
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 26

State 48

	Statement -> var Id ":" Type . ";"                  (rule 14)

	";"            shift, and enter state 52


State 49

	Type -> int .                                       (rule 4)

	";"            reduce using rule 4


State 50

	Type -> float .                                     (rule 2)

	";"            reduce using rule 2


State 51

	Type -> string .                                    (rule 3)

	";"            reduce using rule 3


State 52

	Statement -> var Id ":" Type ";" .                  (rule 14)

	var            reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	endif          reduce using rule 14
	while          reduce using rule 14
	done           reduce using rule 14
	print          reduce using rule 14
	read           reduce using rule 14
	Id             reduce using rule 14
	eof            reduce using rule 14


State 53

	Statement -> if Exp then StatementList else . StatementList endif    (rule 10)

	var            shift, and enter state 4
	if             shift, and enter state 5
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	StatementList  goto state 55
	Statement      goto state 3

State 54

	Statement -> while Exp do StatementList done .      (rule 11)

	var            reduce using rule 11
	if             reduce using rule 11
	else           reduce using rule 11
	endif          reduce using rule 11
	while          reduce using rule 11
	done           reduce using rule 11
	print          reduce using rule 11
	read           reduce using rule 11
	Id             reduce using rule 11
	eof            reduce using rule 11


State 55

	StatementList -> StatementList . Statement          (rule 9)
	Statement -> if Exp then StatementList else StatementList . endif    (rule 10)

	var            shift, and enter state 4
	if             shift, and enter state 5
	endif          shift, and enter state 56
	while          shift, and enter state 6
	print          shift, and enter state 7
	read           shift, and enter state 8
	Id             shift, and enter state 9

	Statement      goto state 26

State 56

	Statement -> if Exp then StatementList else StatementList endif .    (rule 10)

	var            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	endif          reduce using rule 10
	while          reduce using rule 10
	done           reduce using rule 10
	print          reduce using rule 10
	read           reduce using rule 10
	Id             reduce using rule 10
	eof            reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 27
Number of non-terminals: 9
Number of states: 57
