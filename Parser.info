-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parser.y
-----------------------------------------------------------------------------


rule 5 is unused
rule 6 is unused
rule 7 is unused

terminal int_lit is unused
terminal float_lit is unused
terminal string_lit is unused
terminal if is unused
terminal then is unused
terminal else is unused
terminal endif is unused
terminal while is unused
terminal do is unused
terminal done is unused
terminal "=" is unused
terminal "+" is unused
terminal "-" is unused
terminal "*" is unused
terminal "/" is unused
terminal "(" is unused
terminal ")" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> StatementList eof                       (1)
	Type -> float                                      (2)
	Type -> string                                     (3)
	Type -> int                                        (4)
	Literal -> float_lit                               (5)
	Literal -> string_lit                              (6)
	Literal -> int_lit                                 (7)
	StatementList -> Statement                         (8)
	StatementList -> StatementList Statement           (9)
	Statement -> print Id ";"                          (10)
	Statement -> read Id ";"                           (11)
	Statement -> var Id ":" Type ";"                   (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TIntType }
	float          { TFloatType }
	string         { TStringType }
	int_lit        { TIntLit $$ }
	float_lit      { TFloatLit $$ }
	string_lit     { TStringLit $$ }
	var            { TVar }
	if             { TIf }
	then           { TThen }
	else           { TElse }
	endif          { TEndif }
	while          { TWhile }
	do             { TDo }
	done           { TDone }
	"="            { TEquals }
	";"            { TSemiColon }
	":"            { TColon }
	"+"            { TPlus }
	"-"            { TMinus }
	"*"            { TStar }
	"/"            { TSlash }
	"("            { TLeftParen }
	")"            { TRightParen }
	print          { TPrint }
	read           { TRead }
	Id             { TId $$ }
	eof            { TEOF }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Type            rules 2, 3, 4
	Literal         rules 5, 6, 7
	StatementList   rules 8, 9
	Statement       rules 10, 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4
	print          shift, and enter state 5
	read           shift, and enter state 6

	Program        goto state 7
	StatementList  goto state 2
	Statement      goto state 3

State 1


	var            shift, and enter state 4
	print          shift, and enter state 5
	read           shift, and enter state 6

	StatementList  goto state 2
	Statement      goto state 3

State 2

	Program -> StatementList . eof                      (rule 1)
	StatementList -> StatementList . Statement          (rule 9)

	var            shift, and enter state 4
	print          shift, and enter state 5
	read           shift, and enter state 6
	eof            shift, and enter state 12

	Statement      goto state 11

State 3

	StatementList -> Statement .                        (rule 8)

	var            reduce using rule 8
	print          reduce using rule 8
	read           reduce using rule 8
	eof            reduce using rule 8


State 4

	Statement -> var . Id ":" Type ";"                  (rule 12)

	Id             shift, and enter state 10


State 5

	Statement -> print . Id ";"                         (rule 10)

	Id             shift, and enter state 9


State 6

	Statement -> read . Id ";"                          (rule 11)

	Id             shift, and enter state 8


State 7

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 8

	Statement -> read Id . ";"                          (rule 11)

	";"            shift, and enter state 15


State 9

	Statement -> print Id . ";"                         (rule 10)

	";"            shift, and enter state 14


State 10

	Statement -> var Id . ":" Type ";"                  (rule 12)

	":"            shift, and enter state 13


State 11

	StatementList -> StatementList Statement .          (rule 9)

	var            reduce using rule 9
	print          reduce using rule 9
	read           reduce using rule 9
	eof            reduce using rule 9


State 12

	Program -> StatementList eof .                      (rule 1)

	%eof           reduce using rule 1


State 13

	Statement -> var Id ":" . Type ";"                  (rule 12)

	int            shift, and enter state 17
	float          shift, and enter state 18
	string         shift, and enter state 19

	Type           goto state 16

State 14

	Statement -> print Id ";" .                         (rule 10)

	var            reduce using rule 10
	print          reduce using rule 10
	read           reduce using rule 10
	eof            reduce using rule 10


State 15

	Statement -> read Id ";" .                          (rule 11)

	var            reduce using rule 11
	print          reduce using rule 11
	read           reduce using rule 11
	eof            reduce using rule 11


State 16

	Statement -> var Id ":" Type . ";"                  (rule 12)

	";"            shift, and enter state 20


State 17

	Type -> int .                                       (rule 4)

	";"            reduce using rule 4


State 18

	Type -> float .                                     (rule 2)

	";"            reduce using rule 2


State 19

	Type -> string .                                    (rule 3)

	";"            reduce using rule 3


State 20

	Statement -> var Id ":" Type ";" .                  (rule 12)

	var            reduce using rule 12
	print          reduce using rule 12
	read           reduce using rule 12
	eof            reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 27
Number of non-terminals: 6
Number of states: 21
